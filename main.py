import matplotlib.pyplot as plt
import numpy as np
from grid.structures import Domain, States, Regions
from grid.grid import Simulation

from matplotlib.animation import FuncAnimation, PillowWriter
from matplotlib.collections import LineCollection
from PIL import Image


niter = 300
scale = 1
lenN = 20

dt = 1

Greece = Domain('maps/greece')
State = States(Greece, 120, 500, 0.001, 50)
Provinces = Regions(State)

sim = Simulation(Provinces,
                 0.01, #maximum consumption rate per person (pop^-1.year^-1)
                 0.4, #population generated by max consumption (pop)
                 0.002, #pop natural death rate (year^-1)
                 10, #R needed to reach half of maximum consumption rate (res)
                 dt)

sim.random_city_state(lenN)
fig, ax = plt.subplots()
plt.axis('off')


im=plt.imshow(sim.get_img())
scat = plt.scatter(sim.regions.cities.T[1], sim.regions.cities.T[0], s=10, c='black')
ax.set_title(f'Year: 0')

lines, potentials = sim.get_roads()
lc = LineCollection(lines, linewidths=1.5, colors='black', linestyle='solid')
pc = LineCollection(potentials, linewidths=1.5, colors='red', linestyle='dashed')
ax.add_collection(lc)
ax.add_collection(pc)

def animate(i):
    for _ in range(scale):
        sim.update()
    im.set_array(sim.get_img())
    lines, potentials = sim.get_roads()
    lc.set_segments(lines)
    pc.set_segments(potentials)
    ax.set_title(f'Year: {i*scale*dt}, {sim.regions.states.number} states, {sim.regions.number} cities')
    scat.set_offsets(np.c_[sim.regions.cities.T[1], sim.regions.cities.T[0]])

    print(f"step {i}\r", sep=' ', end='', flush=True)
    return im,lc,

writer = PillowWriter(fps=15)
anim = FuncAnimation(fig, animate, frames = niter, blit=False, interval = 100)
anim.save('out.gif', writer=writer)
plt.show()
